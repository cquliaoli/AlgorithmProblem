package com.ll;

/**
 * Created by liaoli
 * date: 2018/6/20
 * time: 15:09
 */
public class MaximalRectangle {


    public static void main(String[] args) {
        char[][]matrix=new char[][]{
                {'1','0','1','0','0'},
                {'1','0','1','1','1'},
                {'1','1','1','1','1'},
                {'1','0','0','1','0'}
        };
        char[][]a=new char[][]{{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1'}
        ,{'1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        ,{'0','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        ,{'0','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','0','1','1','0','1','1','1','1','1','1'}
        ,{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        ,{'1','1','1','1','1','1','1','1','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','1','1'}
        ,{'0','1','1','0','1','1','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','0','1'}
        ,{'0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','0','0','1','1','0','1','1','0','1','0','1','0','1'}
        ,{'1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','0','1','0','1','1','0','1','0','1','1'}
        ,{'1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','1'}
        ,{'1','1','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        ,{'1','0','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        ,{'0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1'}
        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1'}
        ,{'1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1'}
        ,{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','1','1','1','0','0','1','1','1','1','1'},{'1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'},{'1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','1','1'},{'1','1','0','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1'},{'1','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','0','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1'},{'1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','0','1','1','0','1','1'},{'1','1','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','0','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','0','1','0','1','1','0','1','1','1','1','1','1','1','1'},{'1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1'},{'1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1'},{'0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','0','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','0','1','1','1','1'},{'1','1','0','1','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','0','1','0','0'},{'0','1','1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','0','1','1','0','1','1','1','0','1'}};

        char[][]a1=new char[][]{
                {'0','0','0','1','0','1','0'},
                {'0','1','0','0','0','0','0'},
                {'0','1','0','1','0','0','1'},
                {'0','0','1','1','0','0','1'},
                {'1','1','1','1','1','1','0'},
                {'1','0','0','1','0','1','1'},
                {'0','1','0','0','1','0','1'},
                {'1','1','0','1','1','1','0'},
                {'1','0','1','0','1','0','1'},
                {'1','1','1','0','0','0','0'}};
        char[][]a2=new char[][]{
                {'1','1','1','1','1','1','0','1','1','1','1','1','1','1','1'},
                {'1','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'0','1','1','1','1','1','1','0','1','1','1','0','1','1','1'},
                {'1','0','0','1','1','1','1','1','1','1','1','0','1','1','1'},
                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','0','1','1','1','1','1','1','1','0','1','1','1'},
                {'1','1','1','1','0','0','0','1','1','1','1','1','0','1','0'},
                {'1','0','1','1','0','0','0','1','1','1','1','0','1','0','1'},
                {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1'},
                {'1','0','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
                {'1','1','1','0','0','0','1','0','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','0','1','1','1','1','1','1','1','1'},
                {'1','1','1','1','1','1','1','0','1','1','1','1','1','0','1'}};
        MaximalRectangle maximalRectangle=new MaximalRectangle();
        System.out.println(maximalRectangle.maximalRectangle(a));
        System.out.println(maximalRectangle.maximalRectangle(matrix));
        System.out.println(maximalRectangle.maximalRectangle(a1));//6
        System.out.println(maximalRectangle.maximalRectangle(a2));//30
    }
    /**
     * Given a 2D binary matrix filled with 0's and 1's,
     * find the largest rectangle containing only 1's and return its area.
     * Input:
     * [
     *   ['1','0','1','0','0'],
     *   ['1','0','1','1','1'],
     *   ['1','1','1','1','1'],
     *   ['1','0','0','1','0']
     * ]
     * Output: 6
     * @param matrix
     * @return
     */
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length==0)
            return 0;
        int row=matrix.length;
        int col=matrix[0].length;
        Point[][]dp=new Point[row][col];
        dp[0][0]=matrix[0][0]=='1'?new Point(0,0):null;
        for(int y=1;y<row;y++){
            if(matrix[y][0]=='1'){
                if(dp[y-1][0]!=null){
                    dp[y][0]=clone(dp[y-1][0]);
                }else {
                    dp[y][0]=new Point(y,0);
                }
            }
        }
        for(int x=1;x<col;x++){
            if(matrix[0][x]=='1'){
                if(dp[0][x-1]!=null){
                    dp[0][x]=clone(dp[0][x-1]);
                }else {
                    dp[0][x]=new Point(0,x);
                }
            }
        }
        for(int y = 1; y <row; y++){
            for(int x=1;x<col;x++){
                if(matrix[y][x]=='1'){
                    int maxArea=1,tempArea;
                    dp[y][x]=new Point(y,x);
                    if(dp[y -1][x]!=null&&dp[y][x-1]!=null){
                        if(dp[y-1][x-1]!=null){
                            dp[y][x].setY(Math.max(dp[y -1][x].getY(),dp[y -1][x-1].getY()));
                            dp[y][x].setX(Math.max(dp[y][x-1].getX(),dp[y -1][x-1].getX()));
                            tempArea=area(dp[y][x],y,x);
                            if(tempArea>maxArea){
                                maxArea=tempArea;
                            }
                        }

                    }
                    if(dp[y -1][x]!=null){
                        int x1;
                        if(dp[y][x-1]!=null){
                            x1=Math.max(dp[y -1][x].getX(),dp[y][x-1].getX());

                        }else {
                            x1=x;
                        }
                        Point p=new Point(dp[y -1][x].getY(),x1);
                        tempArea=area(p,y,x);
                        if(tempArea>maxArea){
                            maxArea=tempArea;
                            dp[y][x]=p;
                        }
                        int k=y-2;
                        while (k>-1&&matrix[k][x]=='1')
                            k--;
                        Point p1=new Point(k+1,x);
                        tempArea=area(p1,y,x);
                        if(tempArea>maxArea){
                            maxArea=tempArea;
                            dp[y][x]=p1;
                        }

                    }
                    if(dp[y][x-1]!=null){
                        int y1;
                        if(dp[y-1][x]!=null){
                            y1=Math.max(dp[y][x-1].getY(),dp[y-1][x].getY());

                        }else {
                            y1=y;
                        }
                        Point p=new Point(y1,dp[y][x-1].getX());
                        tempArea=area(p,y,x);
                        if(tempArea>maxArea){
                            maxArea=tempArea;
                            dp[y][x]=p;
                        }
                        int k=x-2;
                        while (k>-1&&matrix[y][k]=='1')
                            k--;
                        Point p1=new Point(y,k+1);
                        tempArea=area(p1,y,x);
                        if(tempArea>maxArea){
                            maxArea=tempArea;
                            dp[y][x]=p1;
                        }
                    }
                }
            }
        }
        int maxArea=0;
        for(int y=0;y<row;y++)
            for (int x=0;x<col;x++)
            {
                if(dp[y][x]!=null){
                    int tmax=area(dp[y][x],y,x);
                    if(tmax>maxArea)
                        maxArea=tmax;
                }
            }
        return maxArea;
    }
    public int area(Point p,int y,int x){
        return (x-p.x+1)*(y-p.y+1);
    }

    public Point clone(Point p){
        return new Point(p.getY(),p.getX());
    }
    class Point{
        private Integer x;
        private Integer y;

        public Integer getX() {
            return x;
        }

        public void setX(Integer x) {
            this.x = x;
        }

        public Integer getY() {
            return y;
        }

        public void setY(Integer y) {
            this.y = y;
        }

        public Point(Integer y, Integer x) {
            this.x = x;
            this.y = y;
        }
    }

    //region https://leetcode.com/problems/maximal-rectangle/discuss/29057/Simple-O(n2)-solution-in-Java

    public int maximalRectangle1(char[][] matrix) {
        int res = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                int area = maxArea(matrix, i, j);
                res = Math.max(res, area);
            }
        }
        return res;
    }

    // max area start with point(x,y)
    int maxArea(char[][] M, int x, int y) {
        int maxCol = M[0].length;  // every line ends here
        int res = 0;
        for (int i = x; i < M.length && M[i][y] != 0; i++) {
            for (int j = y; j < maxCol; j++) {
                if (M[i][j] == '0') {
                    maxCol = j;
                    break;
                }
                res = Math.max(res, (i - x + 1) * (j - y + 1));
            }
        }
        return res;
    }
    //endregion
    //region O(n3)
    public int maximalRectangle2(char[][] matrix) {
        if (matrix.length == 0) return 0;

        int col_nums = matrix[0].length;
        int height[] = new int[col_nums];
        int max_area = 0, area;
        for (int i=0; i< matrix.length;i++) {
            for(int j=0; j < col_nums; j++) {
                if (matrix[i][j] == '0') {
                    height[j] = 0;
                } else {
                    height[j] += 1;
                }
            }

            for(int j=0;j<col_nums;j++) {
                if (height[j]==0) continue;

                int left = 0, right = 0;

                // Check how many columns to my left have same or more height as me
                for(int k=j-1;k>=0;k--) {
                    if (height[k]<height[j]) break;
                    left++;
                }

                // Check how many columns to my right have same or more height as me
                for(int k=j+1;k<col_nums;k++) {
                    if (height[k]<height[j]) break;
                    right++;
                }

                area = height[j]*(1+left+right);
                if (area > max_area) max_area = area;
            }
        }

        return max_area;
    }
    //endregion

    //region
    /*
    class Solution {
        public:
            int maximalRectangle(vector<vector<char>>& matrix) {
                if(matrix.size() == 0) return 0;
                int m = matrix.size(), n = matrix[0].size(), maxArea = 0;
                for(int i = 0; i < m; i++)
                    for(int j = 0; j < n; j++)
                        if(matrix[i][j] == '1') maxArea = max(maxArea, BFS(matrix, i, j));
                return maxArea;
            }
            1         1
            1         1
            1       (x,y)
            以x ,y 为出发点逐列扫描，不断更新最大的row
            int BFS(vector<vector<char>>& matrix, int r, int c){
                int row = r - 1, maxArea = 0;
                while(row >= 0 && matrix[row][c] == '1') row--;
                for(int i = c; i >= 0 && matrix[r][i] == '1'; i--){
                    for(int j = row + 1; j <= r; j++)
                        if(matrix[j][i] == '0') row = max(row, j);
                    maxArea = max(maxArea, (r - row) * (c - i + 1));
                }
                return maxArea;
            }
        };
    * */
    //endregion

    public int largestRectangleArea2(int[] heights){
        if(heights.length==0)
            return 0;
        int max=0,len=heights.length;
        int[]left=new int[len];
        int[]right=new int[len];
        left[0]=0;
        right[len-1]=len-1;
        int preLeft=0,preRight;
        for(int i=1;i<len;i++){
            preLeft=i-1;
            while (preLeft>=0&&heights[i]<=heights[preLeft])
                preLeft=left[preLeft]-1;
            left[i]=preLeft+1;
        }
        for(int i=len-2;i>=0;i--){
            preRight=i+1;
            while (preRight<len&&heights[i]<=heights[preRight])
                preRight=right[preRight]+1;
            right[i]=preRight-1;
        }
        for(int i=0;i<len;i++){
            int maxA=(right[i]-left[i]+1)*heights[i];
            max=Math.max(max,maxA);
        }
        return max;
    }
    public int largestRectangleArea1(int[] heights) {
        if(heights.length==0)
            return 0;
        int max=0,len=heights.length;
        for(int i=0;i<len;i++){
            int left=i,right=i;
            while (left>=0&&heights[left]>=heights[i])left--;
            while (right<len&&heights[right]>=heights[i])right++;
            int tMax=(right-1-(left+1)+1)*heights[i];
            if(tMax>max)
                max=tMax;
        }
        return max;
    }

    public int largestRectangleArea(int[] heights) {
        return find(heights, 0, heights.length - 1);
    }
    private int find(int[] h, int left, int right){
        if(left>right) return 0;
        if(left==right) return h[left];
        int minIndex=left;
        boolean sorted=true;
        for(int i=left+1; i<=right; i++){
            if(h[i]<h[i-1]) sorted=false;
            if(h[i]<h[minIndex]) minIndex=i;
        }
        if(sorted){
            int max=0;
            for(int i=left; i<=right; i++){
                if(h[i]*(right-i+1)>max) max=h[i]*(right-i+1);
            }
            return max;
        }
        else{
            int maxLeft=find(h, left, minIndex-1);
            int maxRight=find(h, minIndex+1, right);
            int crossMax=h[minIndex]*(right-left+1);
            return Math.max(Math.max(maxLeft, maxRight), crossMax);
        }
    }


    //region https://leetcode.com/problems/maximal-rectangle/discuss/29080/My-solution-on-Java-using-DP

    public int maximalRectangle4(char[][] matrix) {
        int area = 0, new_area, r, l;
        if(matrix.length > 0){
            int[] line = new int[matrix[0].length];
            boolean[] is_processed = new boolean[matrix[0].length];
            for(int i = 0; i < matrix.length; i++){
                for(int j = 0; j < matrix[i].length; j++){
                    if (matrix[i][j] == '1') {
                        line[j]++;
                        is_processed[j] = false;
                    } else {
                        line[j] = 0;
                        is_processed[j] = true;
                    }
                }
                for(int j = 0; j < matrix[i].length; j++){
                    if(is_processed[j]) continue;
                    r = l = 1;
                    while((j + r < line.length)&&(line[j + r] >= line[j])){
                        if(line[j + r] == line[j]) is_processed[j + r] = true;
                        r++;
                    }
                    while((j - l >= 0)&&(line[j - l] >= line[j])) l++;
                    new_area = (r + l - 1)*line[j];
                    if (new_area > area) area = new_area;
                }
            }
        } return area;
    }
    //endregion
}
